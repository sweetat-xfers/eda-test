version: "3.7"
services:
    mysql:
        image: mysql:5
        ports:
            - 3306:3306
        environment:
            MYSQL_DATABASE: edatest
            MYSQL_ROOT_PASSWORD: password
            MYSQL_USER: xfers
            MYSQL_PASSWORD: password
    # redis:
    #     image: redis:latest
    #     ports:
    #         - 6379:6379
    ruby:
        image: ruby:latest
        ports:
            - 3000:3000
            - 3035:3035
        depends_on:
            - mysql
        volumes:
            - ./rails_app:/xfers:cached
            - my-vendor:/xfers/vendor
            - my-node_modules:/xfers/node_modules
        environment:
            DATABASE_URL: mysql2://xfers:password@mysql:3306/edatest
            NODE_ENV: development
            RAILS_ENV: development
            RUBYOPT: '-W:no-deprecated -W:no-experimental'
            REDIS_URL: redis://redis:6379/
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
            DEBIAN_FRONTEND: noninteractive
        working_dir: /xfers
        tmpfs: /xfers/tmp
        command: >
            /bin/bash -c "
                echo '##################################################' \
                && echo 'Install nodejs' \
                && curl -sL https://deb.nodesource.com/setup_12.x | bash - \
                && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
                && echo 'deb http://dl.yarnpkg.com/debian/ stable main' \
                    > /etc/apt/sources.list.d/yarn.list \
                && apt-get -qq update \
                && apt-get -yq dist-upgrade \
                && apt-get -yq install --no-install-recommends \
                    ca-certificates \
                    curl \
                    git \
                    nodejs \
                    rsync \
                    tzdata \
                    yarn \
                && apt-get clean \
                && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
                && truncate -s 0 /var/log/*log \
                && echo '##################################################' \
                && echo 'Gem Update' \
                && gem update --system \
                && echo '##################################################' \
                && echo 'Gem Install Bundler Foreman' \
                && gem install bundler foreman \
                && echo '##################################################' \
                && echo 'Yarn Install' \
                && yarn install \
                && echo '##################################################' \
                && echo 'Bundle Install' \
                && time bundle install --deployment --without test \
                && echo '##################################################' \
                && echo 'Bundle Rake' \
                    && time bundle exec \
                      rake db:migrate:reset \
                            db:seed \
                && echo '##################################################' \
                && echo 'Run Foreman' \
                && foreman start"
    zookeeper1:
        image: confluentinc/cp-zookeeper:5.5.0
        volumes:
            - ./docker/broker/jmx-exporter:/etc/jmx-exporter
        ports:
            - 7061:7061
            - 2181:2181
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            KAFKA_JMX_OPTS: -javaagent:/etc/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=7061:/etc/jmx-exporter/zookeeper.yaml
    # zookeeper2:
    #     image: confluentinc/cp-zookeeper:5.5.0
    #     volumes:
    #         - ./docker/broker/jmx-exporter:/etc/jmx-exporter
    #     ports:
    #         - 7062:7062
    #         - 2182:2182
    #     environment:
    #         ZOOKEEPER_SERVER_ID: 2
    #         ZOOKEEPER_CLIENT_PORT: 2182
    #         ZOOKEEPER_TICK_TIME: 2000
    #         KAFKA_JMX_OPTS: -javaagent:/etc/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=7062:/etc/jmx-exporter/zookeeper.yaml
    broker1:
        image: confluentinc/cp-kafka:5.5.0
        volumes:
            - ./docker/broker/jmx-exporter:/etc/jmx-exporter
        depends_on:
            - zookeeper1
            # - zookeeper2
        ports:
            - 7071:7071
            - 9091:9091
            - 19092:19092
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9091,PLAINTEXT_HOST://localhost:19092
            KAFKA_JMX_OPTS: -javaagent:/etc/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=7071:/etc/jmx-exporter/kafka-2_0_0.yml
            # Set this only if there is only one broker running
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # broker2:
    #     image: confluentinc/cp-kafka:5.5.0
    #     volumes:
    #         - ./docker/broker/jmx-exporter:/etc/jmx-exporter
    #     depends_on:
    #         - zookeeper1
    #         - zookeeper2
    #     ports:
    #         - 7072:7072
    #         - 9092:9092
    #         - 29092:29092
    #     environment:
    #         KAFKA_BROKER_ID: 2
    #         KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182'
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9092,PLAINTEXT_HOST://localhost:29092
    #         KAFKA_JMX_OPTS: -javaagent:/etc/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=7072:/etc/jmx-exporter/kafka-2_0_0.yml
    # broker3:
    #     image: confluentinc/cp-kafka:5.5.0
    #     volumes:
    #         - ./docker/broker/jmx-exporter:/etc/jmx-exporter
    #     depends_on:
    #         - zookeeper1
    #         - zookeeper2
    #     ports:
    #         - 7073:7073
    #         - 9093:9093
    #         - 39092:39092
    #     environment:
    #         KAFKA_BROKER_ID: 3
    #         KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182'
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9093,PLAINTEXT_HOST://localhost:39092
    #         KAFKA_JMX_OPTS: -javaagent:/etc/jmx-exporter/jmx_prometheus_javaagent-0.12.0.jar=7073:/etc/jmx-exporter/kafka-2_0_0.yml
    # kafka-minion:
    #     image: quay.io/google-cloud-tools/kafka-minion
    #     depends_on: 
    #         - broker1
    #         - broker2
    #         - broker3
    #     ports:
    #         - 8100:8100
    #     restart: always
    #     environment:
    #         KAFKA_VERSION: 2.2.0
    #         KAFKA_BROKERS: broker1:9091,broker2:9092,broker3:9093
    #         TELEMETRY_HOST: 0.0.0.0
    #         TELEMETRY_PORT: 8100
    # prometheus:
    #     image: prom/prometheus
    #     ports:
    #         - 9090:9090
    #     volumes:
    #         - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    # grafana:
    #     image: grafana/grafana
    #     volumes:
    #         - ./docker/grafana/provisioning:/etc/grafana/provisioning
    #         - ./docker/grafana/var/dashboards:/var/lib/grafana/dashboards
    #     ports:
    #         - 3080:3080
    #     environment:
    #         GF_SERVER_HTTP_PORT: 3080
    #         GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    #         GF_REMOTE_CACHE_TYPE: redis
    #         GF_REMOTE_CACHE_CONNSTR: addr=redis:6379
    # datagen:
    #     image: cnfldemos/kafka-connect-datagen:0.3.1-5.4.1
    #     depends_on:
    #         - zookeeper1
    #         - zookeeper2
    #         - broker1
    #         - broker2
    #         - broker3
    #     ports:
    #         - 8083:8083
    #     environment:
    #         CONNECT_BOOTSTRAP_SERVERS: broker1:9091,broker2:9092,broker3:9093
    #         CONNECT_REST_ADVERTISED_HOST_NAME: datagen
    #         CONNECT_REST_PORT: 8083
    #         CONNECT_GROUP_ID: compose-connect-group
    #         CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
    #         CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
    #         CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
    #         CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
    #         CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
    #         CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
    #         CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
    #         CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
    #         CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
    #         CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:6000
    #         CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    #         CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    #         CONNECT_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182
    #         CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
    #         CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    # schema-registry:
    #     image: confluentinc/cp-schema-registry:5.5.0
    #     depends_on:
    #         - zookeeper1
    #         - zookeeper2
    #         - broker1
    #         - broker2
    #         - broker3
    #     ports:
    #         - 6000:6000
    #     environment:
    #         SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9091,PLAINTEXT://kafka2:9092,PLAINTEXT://kafka3:9093
    #         SCHEMA_REGISTRY_HOST_NAME: schema-registry
    #         SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper1:2181,zookeeper2:2182
    #         SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:6000
    # # https://debezium.io/documentation/reference/tutorial.html#introduction-debezium
    # mysql-sink-connect:
    #     image: debezium/connect:1.2.0
    #     depends_on:
    #         - zookeeper1
    #         - zookeeper2
    #         - broker1
    #         - broker2
    #         - broker3
    #     ports:
    #         - 7000:7000
    #     environment:
    #         CONNECT_BOOTSTRAP_SERVERS: broker1:9091,broker2:9092,broker3:9093
    #         CONNECT_REST_ADVERTISED_PORT: 7000
    #         CONNECT_REST_PORT: 7000
    #         CONNECT_GROUP_ID: 1
    cg1:
        image: ruby:latest
        depends_on:
            - mysql
            - zookeeper1
            # - zookeeper2
            - broker1
            # - broker2
            # - broker3
        volumes:
            - ./kafka/cg1-mysqlsink:/xfers:cached
            - /xfers/vendor
        environment:
            DATABASE_URL: mysql2://xfers:password@mysql:3306/edatest
            RAILS_ENV: development
            RUBYOPT: '-W:no-deprecated -W:no-experimental'
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
        working_dir: /xfers
        tmpfs: /xfers/tmp
        command: >
            /bin/bash -c " \
                echo '##################################################' \
                && echo 'Gem install Bundler' \
                && gem install bundler \
                && echo '##################################################' \
                && echo 'Install Bundle' \
                && bundle install \
                && phobos start"
volumes:
    my-node_modules:
    my-vendor:  