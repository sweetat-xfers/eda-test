version: "3.7"
services:
    mysql:
        image: mysql:5
        ports:
            - "3306:3306"
        environment:
            MYSQL_DATABASE: edatest
            MYSQL_ROOT_PASSWORD: password
            MYSQL_USER: xfers
            MYSQL_PASSWORD: password
    redis:
        image: redis:latest
        ports:
            - "6379:6379"
    ruby:
        image: ruby:latest
        ports:
            - "3000:3000"
            - "3035:3035"
        depends_on:
            - mysql
        volumes:
            - ./rails_app:/xfers:cached
            - my-vendor:/xfers/vendor
            - my-node_modules:/xfers/node_modules
        environment:
            DATABASE_URL: mysql2://xfers:password@mysql:3306/edatest
            NODE_ENV: development
            RAILS_ENV: development
            RUBYOPT: '-W:no-deprecated -W:no-experimental'
            REDIS_URL: redis://redis:6379/
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
            DEBIAN_FRONTEND: noninteractive
        working_dir: /xfers
        tmpfs: /xfers/tmp
        command: >
            /bin/bash -c "
                echo '##################################################' \
                && echo 'Install nodejs' \
                && curl -sL https://deb.nodesource.com/setup_12.x | bash - \
                && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
                && echo 'deb http://dl.yarnpkg.com/debian/ stable main' \
                    > /etc/apt/sources.list.d/yarn.list \
                && apt-get -qq update \
                && apt-get -yq dist-upgrade \
                && apt-get -yq install --no-install-recommends \
                    ca-certificates \
                    curl \
                    git \
                    nodejs \
                    rsync \
                    tzdata \
                    yarn \
                && apt-get clean \
                && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
                && truncate -s 0 /var/log/*log \
                && echo '##################################################' \
                && echo 'Gem Update' \
                && gem update --system \
                && echo '##################################################' \
                && echo 'Gem Install Bundler Foreman' \
                && gem install bundler foreman \
                && echo '##################################################' \
                && echo 'Yarn Install' \
                && yarn install \
                && echo '##################################################' \
                && echo 'Bundle Install' \
                && time bundle install --deployment --without test \
                && echo '##################################################' \
                && echo 'Bundle Rake' \
                    && time bundle exec \
                      rake db:migrate:reset \
                            db:seed \
                && echo '##################################################' \
                && echo 'Run Foreman' \
                && foreman start"
    zookeeper:
        image: confluentinc/cp-zookeeper:5.5.0
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
    broker:
        image: confluentinc/cp-kafka:5.5.0
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        ports:
            - "29092:29092"
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    kafka-exporter:
        image: danielqsj/kafka-exporter:latest
        ports:
            - "9308:9308"
        command: "--kafka.server=broker:29092"
    prometheus:
        image: prom/prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    grafana:
        image: grafana/grafana
        volumes:
            - ./docker/grafana/provisioning:/etc/grafana/provisioning
        ports:
            - "3080:3080"
        environment:
            GF_SERVER_HTTP_PORT: 3080
            GF_PATHS_PROVISIONING: /etc/grafana/provisioning
            GF_REMOTE_CACHE_TYPE: "redis"
            GF_REMOTE_CACHE_CONNSTR: "addr=redis:6379"
            GF_AUTH_DISABLE_LOGIN_FORM: "true"
            GF_AUTH_ANONYMOUS_ENABLED: "true"
volumes:
    my-node_modules:
    my-vendor: